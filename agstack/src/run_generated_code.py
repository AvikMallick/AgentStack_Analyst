#!/usr/bin/env python
"""
Script to run the Python code generated by the code_generator_agent.
"""
import os
import sys
import logging
import argparse
import subprocess
import tempfile

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def run_generated_code(code: str):
    """
    Run the generated Python code in a subprocess.
    
    Args:
        code: The Python code to execute
    """
    # Get the path to the src directory
    current_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = current_dir  # We're already in src
    
    # Create a temporary file with the code
    with tempfile.NamedTemporaryFile(suffix='.py', mode='w', delete=False) as f:
        # Add a line to import sys and modify sys.path
        setup_code = f"""
import sys
import os

# Add the src directory to the Python path
src_dir = "{src_dir}"
if src_dir not in sys.path:
    sys.path.insert(0, src_dir)

"""
        f.write(setup_code + code)
        temp_file = f.name
        
    logger.info(f"Generated code saved to temporary file: {temp_file}")
    
    try:
        # Set up environment variables
        env = os.environ.copy()
        env["PYTHONPATH"] = src_dir + ":" + env.get("PYTHONPATH", "")
        
        # Execute the code in a subprocess
        logger.info("Executing generated code...")
        result = subprocess.run(
            [sys.executable, temp_file],
            capture_output=True,
            text=True,
            check=True,
            env=env
        )
        
        # Print stdout and stderr
        if result.stdout:
            print("\n--- STDOUT ---")
            print(result.stdout)
        
        if result.stderr:
            print("\n--- STDERR ---")
            print(result.stderr)
            
        print("\nExecution completed successfully!")
        
    except subprocess.CalledProcessError as e:
        print("\n--- EXECUTION ERROR ---")
        print(f"Exit code: {e.returncode}")
        
        if e.stdout:
            print("\n--- STDOUT ---")
            print(e.stdout)
        
        if e.stderr:
            print("\n--- STDERR ---")
            print(e.stderr)
    finally:
        # Clean up the temporary file
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def main():
    parser = argparse.ArgumentParser(description="Run generated Python code")
    parser.add_argument("--code", type=str, help="Python code to execute")
    parser.add_argument("--file", type=str, help="File containing Python code to execute")
    
    args = parser.parse_args()
    
    if args.code:
        run_generated_code(args.code)
    elif args.file:
        with open(args.file, 'r') as f:
            code = f.read()
        run_generated_code(code)
    else:
        parser.print_help()
        sys.exit(1)

if __name__ == "__main__":
    main() 